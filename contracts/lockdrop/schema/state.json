{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "State",
  "type": "object",
  "required": [
    "are_claims_allowed",
    "final_maust_locked",
    "final_ust_locked",
    "total_deposits_weight",
    "total_mars_delegated",
    "total_maust_locked",
    "total_ust_locked",
    "xmars_per_maust_share"
  ],
  "properties": {
    "are_claims_allowed": {
      "description": "Boolean value indicating if the user can withdraw thier MARS rewards or not",
      "type": "boolean"
    },
    "final_maust_locked": {
      "description": "maUST minted at the end of Lockdrop window upon UST deposit in red bank. This value remains unchanged post the lockdrop window",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "final_ust_locked": {
      "description": "Total UST deposited at the end of Lockdrop window. This value remains unchanged post the lockdrop window",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "total_deposits_weight": {
      "description": "Total weighted deposits",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "total_mars_delegated": {
      "description": "MARS Tokens deposited into the bootstrap auction contract",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "total_maust_locked": {
      "description": "maUST held by the contract. This value is updated real-time upon each maUST withdrawal from red bank",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "total_ust_locked": {
      "description": "UST deposited in the contract. This value is updated real-time upon each UST deposit / unlock",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "xmars_per_maust_share": {
      "description": "Ratio of MARS rewards accured to total_maust_locked. Used to calculate MARS incentives accured by each user",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    }
  },
  "definitions": {
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
