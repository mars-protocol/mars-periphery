{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "required": [
            "new_config"
          ],
          "properties": {
            "new_config": {
              "$ref": "#/definitions/UpdateConfigMsg"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Function to deposit UST in the contract locked for `duration` number of weeks, starting once the deposits/withdrawals are disabled",
      "type": "object",
      "required": [
        "deposit_ust"
      ],
      "properties": {
        "deposit_ust": {
          "type": "object",
          "required": [
            "duration"
          ],
          "properties": {
            "duration": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Function to withdraw UST from the lockup position which is locked for `duration` number of weeks",
      "type": "object",
      "required": [
        "withdraw_ust"
      ],
      "properties": {
        "withdraw_ust": {
          "type": "object",
          "required": [
            "amount",
            "duration"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "duration": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "ADMIN Function :: Deposits all UST into the Red Bank",
      "type": "object",
      "required": [
        "deposit_ust_in_red_bank"
      ],
      "properties": {
        "deposit_ust_in_red_bank": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Deposit MARS to auction contract",
      "type": "object",
      "required": [
        "deposit_mars_to_auction"
      ],
      "properties": {
        "deposit_mars_to_auction": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Facilitates MARS reward claim and optionally unlocking any lockup position once the lockup duration is over",
      "type": "object",
      "required": [
        "claim_rewards_and_unlock"
      ],
      "properties": {
        "claim_rewards_and_unlock": {
          "type": "object",
          "properties": {
            "lockup_to_unlock_duration": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Called by the bootstrap auction contract when liquidity is added to the MARS-UST Pool to enable MARS withdrawals by users",
      "type": "object",
      "required": [
        "enable_claims"
      ],
      "properties": {
        "enable_claims": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Callbacks; only callable by the contract itself.",
      "type": "object",
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "$ref": "#/definitions/CallbackMsg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "CallbackMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "update_state_on_red_bank_deposit"
          ],
          "properties": {
            "update_state_on_red_bank_deposit": {
              "type": "object",
              "required": [
                "prev_ma_ust_balance"
              ],
              "properties": {
                "prev_ma_ust_balance": {
                  "$ref": "#/definitions/Uint128"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update_state_on_claim"
          ],
          "properties": {
            "update_state_on_claim": {
              "type": "object",
              "required": [
                "prev_xmars_balance",
                "user"
              ],
              "properties": {
                "prev_xmars_balance": {
                  "$ref": "#/definitions/Uint128"
                },
                "user": {
                  "$ref": "#/definitions/Addr"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "dissolve_position"
          ],
          "properties": {
            "dissolve_position": {
              "type": "object",
              "required": [
                "duration",
                "user"
              ],
              "properties": {
                "duration": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "user": {
                  "$ref": "#/definitions/Addr"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "UpdateConfigMsg": {
      "type": "object",
      "properties": {
        "address_provider": {
          "description": "Contract used to query addresses related to red-bank (MARS Token)",
          "type": [
            "string",
            "null"
          ]
        },
        "auction_contract_address": {
          "description": "Bootstrap Auction contract address",
          "type": [
            "string",
            "null"
          ]
        },
        "ma_ust_token": {
          "description": "maUST token address - Minted upon UST deposits into red bank",
          "type": [
            "string",
            "null"
          ]
        },
        "owner": {
          "description": "Account who can update config",
          "type": [
            "string",
            "null"
          ]
        }
      }
    }
  }
}
