{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "anyOf": [
    {
      "description": "Open a new user position or add to an existing position @dev Increase the total LP shares Bonded by equal no. of shares as sent by the user",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update data stored in config / state (cycle params) @param new_config The new config info to be stored",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "required": [
            "new_config"
          ],
          "properties": {
            "new_config": {
              "$ref": "#/definitions/InstantiateMsg"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Decrease the total LP shares Bonded by the user Accrued rewards are claimed along-with this function @param amount The no. of LP shares to be subtracted from the total Bonded and sent back to the user",
      "type": "object",
      "required": [
        "unbond"
      ],
      "properties": {
        "unbond": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint256"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Claim pending rewards",
      "type": "object",
      "required": [
        "claim"
      ],
      "properties": {
        "claim": {
          "type": "object"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "Decimal256": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal256(1_000_000_000_000_000_000) == 1.0 The greatest possible value that can be represented is 115792089237316195423570985008687907853269984665640564039457.584007913129639935 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "InstantiateMsg": {
      "type": "object",
      "properties": {
        "address_provider": {
          "description": "Contract used to query addresses related to red-bank (MARS Token)",
          "type": [
            "string",
            "null"
          ]
        },
        "cycle_duration": {
          "description": "Cycle duration in timestamps",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "cycle_rewards": {
          "description": "$MARS Rewards distributed during the 1st cycle.",
          "anyOf": [
            {
              "$ref": "#/definitions/Uint256"
            },
            {
              "type": "null"
            }
          ]
        },
        "init_timestamp": {
          "description": "Timestamp from which MARS Rewards will start getting accrued against the staked LP tokens",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "owner": {
          "description": "Account who can update config",
          "type": [
            "string",
            "null"
          ]
        },
        "reward_increase": {
          "description": "Percent increase in Rewards per cycle",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal256"
            },
            {
              "type": "null"
            }
          ]
        },
        "staking_token": {
          "description": "MARS-UST LP token address - accepted by the contract via Cw20ReceiveMsg function",
          "type": [
            "string",
            "null"
          ]
        },
        "till_timestamp": {
          "description": "Timestamp till which MARS Rewards will be accrued. No staking rewards are accrued beyond this timestamp",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint256": {
      "type": "string"
    }
  }
}
