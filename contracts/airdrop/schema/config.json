{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Config",
  "type": "object",
  "required": [
    "are_claims_enabled",
    "evm_merkle_roots",
    "from_timestamp",
    "mars_token_address",
    "owner",
    "terra_merkle_roots",
    "to_timestamp"
  ],
  "properties": {
    "are_claims_enabled": {
      "description": "Boolean value indicating if the users can withdraw their MARS airdrop tokens or not This value is updated in the same Tx in which Liquidity is added to the LP Pool",
      "type": "boolean"
    },
    "auction_contract_address": {
      "description": "Boostrap auction contract address",
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ]
    },
    "evm_merkle_roots": {
      "description": "Merkle roots used to verify is an evm user is eligible for the airdrop",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "from_timestamp": {
      "description": "Timestamp since which MARS airdrops can be delegated to boostrap auction contract",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "mars_token_address": {
      "description": "MARS token address",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "owner": {
      "description": "Account who can update config",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "terra_merkle_roots": {
      "description": "Merkle roots used to verify is a terra user is eligible for the airdrop",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "to_timestamp": {
      "description": "Timestamp to which MARS airdrops can be claimed",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    }
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    }
  }
}
