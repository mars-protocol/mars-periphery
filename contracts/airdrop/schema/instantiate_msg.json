{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "auction_contract_address",
    "mars_token_address",
    "to_timestamp",
    "total_airdrop_size"
  ],
  "properties": {
    "auction_contract_address": {
      "type": "string"
    },
    "evm_merkle_roots": {
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "from_timestamp": {
      "type": [
        "integer",
        "null"
      ],
      "format": "uint64",
      "minimum": 0.0
    },
    "mars_token_address": {
      "type": "string"
    },
    "owner": {
      "type": [
        "string",
        "null"
      ]
    },
    "terra_merkle_roots": {
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "to_timestamp": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "total_airdrop_size": {
      "$ref": "#/definitions/Uint128"
    }
  },
  "definitions": {
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
