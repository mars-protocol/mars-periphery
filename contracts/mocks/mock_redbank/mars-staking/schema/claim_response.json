{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ClaimResponse",
  "description": "Response to Claim query",
  "type": "object",
  "properties": {
    "claim": {
      "description": "Existing claim for a given address. Will return None if it doesn't exist",
      "anyOf": [
        {
          "$ref": "#/definitions/Claim"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "definitions": {
    "Claim": {
      "description": "Unstaking cooldown data",
      "type": "object",
      "required": [
        "amount",
        "cooldown_end_timestamp",
        "created_at_block"
      ],
      "properties": {
        "amount": {
          "description": "Amount of Mars that the user is allowed to claim",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "cooldown_end_timestamp": {
          "description": "Timestamp (in seconds) after which the claim is unlocked",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "created_at_block": {
          "description": "Block when the claim was created (Used to apply slash events when claiming)",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
