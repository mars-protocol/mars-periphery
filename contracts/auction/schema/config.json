{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Config",
  "type": "object",
  "required": [
    "airdrop_contract_address",
    "astro_token_address",
    "deposit_window",
    "generator_contract",
    "init_timestamp",
    "lockdrop_contract_address",
    "lp_tokens_vesting_duration",
    "mars_rewards",
    "mars_token_address",
    "mars_vesting_duration",
    "owner",
    "withdrawal_window"
  ],
  "properties": {
    "airdrop_contract_address": {
      "description": "Airdrop Contract address",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "astro_token_address": {
      "description": "ASTRO token address",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "astroport_lp_pool": {
      "description": "MARS-UST LP Pool address",
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ]
    },
    "deposit_window": {
      "description": "Number of seconds post init_timestamp during which deposits / withdrawals will be allowed",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "generator_contract": {
      "description": "Astroport Generator contract with which MARS-UST LP Tokens can be staked",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "init_timestamp": {
      "description": "Timestamp since which MARS / UST deposits will be allowrd",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "lockdrop_contract_address": {
      "description": "Lockdrop Contract address",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "lp_token_address": {
      "description": "MARS-UST LP Token address",
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ]
    },
    "lp_tokens_vesting_duration": {
      "description": "Number of seconds over which LP Tokens are vested",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "mars_lp_staking_contract": {
      "description": "MARS LP Staking contract with which MARS-UST LP Tokens can be staked",
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ]
    },
    "mars_rewards": {
      "description": "Total MARS token rewards to be used to incentivize boostrap auction participants",
      "allOf": [
        {
          "$ref": "#/definitions/Uint256"
        }
      ]
    },
    "mars_token_address": {
      "description": "MARS token address",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "mars_vesting_duration": {
      "description": "Number of seconds over which MARS incentives are vested",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "owner": {
      "description": "Account who can update config",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "withdrawal_window": {
      "description": "Number of seconds post deposit_window completion during which only withdrawals are allowed",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    }
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Uint256": {
      "type": "string"
    }
  }
}
