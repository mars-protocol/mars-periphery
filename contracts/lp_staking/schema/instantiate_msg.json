{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "cycle_duration",
    "init_timestamp",
    "mars_token",
    "till_timestamp"
  ],
  "properties": {
    "cycle_duration": {
      "description": "Cycle duration in timestamps",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "cycle_rewards": {
      "description": "$MARS Rewards distributed during the 1st cycle.",
      "anyOf": [
        {
          "$ref": "#/definitions/Uint128"
        },
        {
          "type": "null"
        }
      ]
    },
    "init_timestamp": {
      "description": "Timestamp from which MARS Rewards will start getting accrued against the staked LP tokens",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "mars_token": {
      "description": "Mars token Contract",
      "type": "string"
    },
    "owner": {
      "description": "Account who can update config",
      "type": [
        "string",
        "null"
      ]
    },
    "reward_increase": {
      "description": "Percent increase in Rewards per cycle",
      "anyOf": [
        {
          "$ref": "#/definitions/Decimal"
        },
        {
          "type": "null"
        }
      ]
    },
    "staking_token": {
      "description": "MARS-UST LP token address - accepted by the contract via Cw20ReceiveMsg function",
      "type": [
        "string",
        "null"
      ]
    },
    "till_timestamp": {
      "description": "Timestamp till which MARS Rewards will be accrued. No staking rewards are accrued beyond this timestamp",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    }
  },
  "definitions": {
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
